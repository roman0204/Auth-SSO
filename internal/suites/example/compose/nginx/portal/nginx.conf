#
# You can find a documented example of configuration in ./docs/proxies/nginx.md.
#
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    server {
        listen 8080 ssl;
        server_name     login.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $frontend_endpoint http://authelia-frontend:3000;
        set $backend_endpoint https://authelia-backend:9091;
        set $metrics_endpoint http://authelia-backend:9959;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        # Serve the backend API for the portal.
        location /api {
            proxy_set_header  X-Real-IP $remote_addr;

            # Required by Authelia because "trust proxy" option is used.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header  X-Forwarded-Proto $scheme;

            # Required by Authelia to build correct links for identity validation.
            proxy_set_header  X-Forwarded-Host $http_host;
            proxy_set_header  X-Forwarded-URI $request_uri;

            # Needed for network ACLs to work. It appends the IP of the client to the list of IPs
            # and allows Authelia to use it to match the network-based ACLs.
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_intercept_errors on;

            proxy_pass        $backend_endpoint;
        }

        location /.well-known {
            # Required by Authelia because "trust proxy" option is used.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header  X-Forwarded-Proto $scheme;

            # Required by Authelia to build correct links for identity validation.
            proxy_set_header  X-Forwarded-Host $http_host;
            proxy_set_header  X-Forwarded-URI $request_uri;

            # Needed for network ACLs to work. It appends the IP of the client to the list of IPs
            # and allows Authelia to use it to match the network-based ACLs.
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_intercept_errors on;

            proxy_pass        $backend_endpoint;
        }

        location /locales {
            # Required by Authelia because "trust proxy" option is used.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header  X-Forwarded-Proto $scheme;

            # Required by Authelia to build correct links for identity validation.
            proxy_set_header  X-Forwarded-Host $http_host;
            proxy_set_header  X-Forwarded-URI $request_uri;

            # Needed for network ACLs to work. It appends the IP of the client to the list of IPs
            # and allows Authelia to use it to match the network-based ACLs.
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_intercept_errors on;

            proxy_pass        $backend_endpoint;
        }

        location /jwks.json {
            # Required by Authelia because "trust proxy" option is used.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header  X-Forwarded-Proto $scheme;

            # Required by Authelia to build correct links for identity validation.
            proxy_set_header  X-Forwarded-Host $http_host;
            proxy_set_header  X-Forwarded-URI $request_uri;

            # Needed for network ACLs to work. It appends the IP of the client to the list of IPs
            # and allows Authelia to use it to match the network-based ACLs.
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_intercept_errors on;

            proxy_pass        $backend_endpoint;
        }

        location /metrics {
            proxy_pass        $metrics_endpoint;
        }

        # Serves the portal application.
        location / {
            # Allow websockets for webpack to auto-reload.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host:$server_port;

            proxy_pass        $frontend_endpoint;
        }
    }

    # Serves the home page.
    server {
        listen 8080 ssl;
        server_name     home.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_endpoint http://nginx-backend;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        location / {
            proxy_set_header  Host $http_host;
            proxy_pass        $upstream_endpoint;
        }
    }

    # Example configuration of domains protected by Authelia.
    server {
        listen 8080 ssl;
        server_name     public.example.com
                        admin.example.com
                        secure.example.com
                        dev.example.com
                        singlefactor.example.com
                        mx1.mail.example.com mx2.mail.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_verify https://authelia-backend:9091/api/verify;
        set $upstream_endpoint http://nginx-backend;
        set $upstream_headers http://httpbin:8000/headers;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        # Reverse proxy to the backend. It is protected by Authelia by forwarding authorization checks
        # to the virtual endpoint introduced by nginx and declared in the next block.
        location / {
            auth_request /auth_verify;

            auth_request_set            $user $upstream_http_remote_user;
            proxy_set_header            Remote-User $user;

            auth_request_set            $groups $upstream_http_remote_groups;
            proxy_set_header            Remote-Groups $groups;

            auth_request_set            $name $upstream_http_remote_name;
            proxy_set_header            Remote-Name $name;

            auth_request_set            $email $upstream_http_remote_email;
            proxy_set_header            Remote-Email $email;

            # Route the request to the correct virtual host in the backend.
            proxy_set_header            Host $http_host;

            # Authelia relies on Proxy-Authorization header to authenticate in basic auth.
            # but for the sake of simplicity (because Authorization in supported in most
            # clients) we take Authorization from the frontend and rewrite it to
            # Proxy-Authorization before sending it to Authelia.
            proxy_set_header            Proxy-Authorization $http_authorization;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header            Proxy "";

            # Set the `target_url` variable based on the request. It will be used to build the portal
            # URL with the correct redirection parameter.
            set                         $target_url $scheme://$http_host$request_uri;
            error_page 401 =302         https://login.example.com:8080/?rd=$target_url;

            proxy_pass                  $upstream_endpoint;
        }

        # Virtual endpoint forwarding requests to Authelia server.
        location /auth_verify {
            internal;
            proxy_set_header            X-Real-IP $remote_addr;

            # Provide either X-Original-URL and X-Forwarded-Proto or
            # X-Forwarded-Proto, X-Forwarded-Host and X-Forwarded-URI or both.
            # Those headers will be used by Authelia to deduce the target url of the user.
            #
            # X-Forwarded-Proto is mandatory since Authelia uses the "trust proxy" option.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header            X-Original-URL $scheme://$http_host$request_uri;

            proxy_set_header            X-Forwarded-Method $request_method;
            proxy_set_header            X-Forwarded-Proto $scheme;
            proxy_set_header            X-Forwarded-Host $http_host;
            proxy_set_header            X-Forwarded-URI $request_uri;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

            # Authelia can receive Proxy-Authorization to authenticate however most of the clients
            # support Authorization instead. Therefore we rewrite Authorization into Proxy-Authorization.
            proxy_set_header            Proxy-Authorization $http_authorization;

            proxy_pass_request_body     off;
            proxy_set_header            Content-Length "";

            proxy_pass                  $upstream_verify;
        }

        # Used by suites to test the forwarded users and groups headers produced by Authelia.
        location /headers {
            auth_request /auth_verify;

            auth_request_set            $user $upstream_http_remote_user;
            proxy_set_header            Remote-User $user;

            auth_request_set            $groups $upstream_http_remote_groups;
            proxy_set_header            Remote-Groups $groups;

            auth_request_set            $name $upstream_http_remote_name;
            proxy_set_header            Remote-Name $name;

            auth_request_set            $email $upstream_http_remote_email;
            proxy_set_header            Remote-Email $email;

            set                         $target_url $scheme://$http_host$request_uri;
            error_page 401 =302         https://login.example.com:8080/?rd=$target_url;

            proxy_pass                  $upstream_headers;
        }
    }

    # Example configuration of domains protected by Authelia.
    server {
        listen 8080 ssl;
        server_name     oidc.example.com
                        oidc-public.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_verify https://authelia-backend:9091/api/verify;
        set $upstream_endpoint http://oidc-client:8080;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        # Reverse proxy to the backend. It is protected by Authelia by forwarding authorization checks
        # to the virtual endpoint introduced by nginx and declared in the next block.
        location / {
            auth_request /auth_verify;

            # Route the request to the correct virtual host in the backend.
            proxy_set_header            Host $http_host;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header            Proxy "";

            # Set the `target_url` variable based on the request. It will be used to build the portal
            # URL with the correct redirection parameter.
            set                         $target_url $scheme://$http_host$request_uri;
            error_page 401 =302         https://login.example.com:8080/?rd=$target_url;

            proxy_pass                  $upstream_endpoint;
        }

        # Virtual endpoint forwarding requests to Authelia server.
        location /auth_verify {
            internal;
            proxy_set_header            X-Real-IP $remote_addr;

            # Provide either X-Original-URL and X-Forwarded-Proto or
            # X-Forwarded-Proto, X-Forwarded-Host and X-Forwarded-URI or both.
            # Those headers will be used by Authelia to deduce the target url of the user.
            #
            # X-Forwarded-Proto is mandatory since Authelia uses the "trust proxy" option.
            # See https://expressjs.com/en/guide/behind-proxies.html
            proxy_set_header            X-Original-URL $scheme://$http_host$request_uri;

            proxy_set_header            X-Forwarded-Proto $scheme;
            proxy_set_header            X-Forwarded-Host $http_host;
            proxy_set_header            X-Forwarded-URI $request_uri;

            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

            # Authelia can receive Proxy-Authorization to authenticate however most of the clients
            # support Authorization instead. Therefore we rewrite Authorization into Proxy-Authorization.
            proxy_set_header            Proxy-Authorization $http_authorization;

            proxy_pass_request_body     off;
            proxy_set_header            Content-Length "";

            proxy_pass                  $upstream_verify;
        }
    }

    # Fake Web Mail used to receive emails sent by Authelia.
    server {
        listen 8080 ssl;
        server_name     mail.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_endpoint http://smtp:1080;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        location / {
            proxy_set_header  Host $http_host;
            proxy_pass        $upstream_endpoint;
        }
    }

    # Fake API emulating Duo behavior
    server {
        listen 443 ssl;
        server_name     duo.example.com;

        resolver 127.0.0.11 ipv6=off;
        set $upstream_endpoint http://duo-api:3000;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN";

        error_page 497 301 =307 https://$host:$server_port$request_uri;

        location / {
            proxy_set_header  Host $http_host;
            proxy_pass        $upstream_endpoint;
        }
    }

    # Matches all domains. It redirects to the home page.
    server {
	    listen 8080 ssl;
	    server_name _;

        ssl_certificate     /etc/ssl/server.cert;
        ssl_certificate_key /etc/ssl/server.key;

	    return 301 https://home.example.com:8080/;
    }
}
